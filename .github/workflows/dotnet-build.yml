# Имя workflow
name: Build, Release and Publish to NuGet

# Триггер: запуск при создании и отправке нового тега 'v*.*.*'
on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

# Переменные окружения для проекта
env:
  PROJECT_PATH: 'MathLibrary/MathLibrary.csproj'
  PROJECT_NAME: 'MathLibrary'
  DOTNET_VERSION: '9.0.x'
  ARTIFACTS_DIR: release-assets

jobs:
  build-and-release:
    # Выдаем права на запись для создания релиза
    permissions:
      contents: write

    runs-on: ubuntu-latest
    steps:
    # Шаг 1: Клонирование репозитория
    - name: Checkout repository
      uses: actions/checkout@v4

    # Шаг 2: Установка .NET SDK
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # Шаг 3: Восстановление зависимостей NuGet
    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    # Шаг 4: Упаковка NuGet-пакета
    # Создает .nupkg файл. Версия пакета берется из имени тега.
    - name: Pack NuGet package
      run: |
        # ${{ github.ref_name }} автоматически содержит имя тега (например, v1.0.0)
        # Убираем 'v' из начала имени тега, чтобы получить чистую версию (1.0.0)
        VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')
        dotnet pack ${{ env.PROJECT_PATH }} -c Release -p:PackageVersion=$VERSION -o ${{ env.ARTIFACTS_DIR }}

    # Шаг 5: Публикация в NuGet
    # Отправляет созданный .nupkg в репозиторий NuGet.org
    - name: Push to NuGet
      run: dotnet nuget push "${{ env.ARTIFACTS_DIR }}/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source "https://api.nuget.org/v3/index.json" --skip-duplicate

    # Шаг 6: Публикация библиотек для релиза GitHub
    # Этот шаг остается для тех, кто хочет скачать отдельные .dll
    - name: Build Libraries for GitHub Release
      run: |
        rids=("win-x64" "win-arm64" "linux-x64" "linux-arm64" "osx-x64" "osx-arm64")
        for rid in "${rids[@]}"; do
          dotnet publish "${{ env.PROJECT_PATH }}" -c Release -r "$rid" --self-contained true -o "./publish_temp"
          cp ./publish_temp/${{ env.PROJECT_NAME }}.dll ./${{ env.ARTIFACTS_DIR }}/lib-${{ env.PROJECT_NAME }}-$rid.dll
          rm -rf ./publish_temp/*
        done
        dotnet publish "${{ env.PROJECT_PATH }}" -c Release -o "./publish_temp"
        cp ./publish_temp/${{ env.PROJECT_NAME }}.dll ./${{ env.ARTIFACTS_DIR }}/lib-${{ env.PROJECT_NAME }}-portable.dll

    # Шаг 7: Создание релиза на GitHub
    # Прикрепляет к релизу все файлы из папки артефактов (и .nupkg, и .dll).
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ env.ARTIFACTS_DIR }}/*
        name: Release ${{ github.ref_name }}
        body: |
          New release based on tag ${{ github.ref_name }}.
          Package has been published to NuGet.
          Contains pre-compiled libraries for Windows, Linux, and macOS (x64 & arm64).
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}